# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import station_data_pb2 as station__data__pb2


class StationDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLatest = channel.unary_unary(
                '/StationDataService/GetLatest',
                request_serializer=station__data__pb2.GetLatestRequest.SerializeToString,
                response_deserializer=station__data__pb2.GetLatestResponse.FromString,
                )
        self.GetRecords = channel.unary_unary(
                '/StationDataService/GetRecords',
                request_serializer=station__data__pb2.GetRecordsRequest.SerializeToString,
                response_deserializer=station__data__pb2.GetRecordsResponse.FromString,
                )


class StationDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLatest(self, request, context):
        """Receive most recent record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecords(self, request, context):
        """Receive records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StationDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLatest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatest,
                    request_deserializer=station__data__pb2.GetLatestRequest.FromString,
                    response_serializer=station__data__pb2.GetLatestResponse.SerializeToString,
            ),
            'GetRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecords,
                    request_deserializer=station__data__pb2.GetRecordsRequest.FromString,
                    response_serializer=station__data__pb2.GetRecordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StationDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StationDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLatest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StationDataService/GetLatest',
            station__data__pb2.GetLatestRequest.SerializeToString,
            station__data__pb2.GetLatestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StationDataService/GetRecords',
            station__data__pb2.GetRecordsRequest.SerializeToString,
            station__data__pb2.GetRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
